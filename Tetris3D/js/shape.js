// Generated by CoffeeScript 1.6.2
(function() {
  window.Tetris = {};

  Tetris.Shape = (function() {
    function Shape(points) {
      this.blocks = points.map(function(_arg) {
        var x, y, z;

        x = _arg[0], y = _arg[1], z = _arg[2];
        return new Tetris.Block(x, y, z);
      });
      this.position = {
        x: 0,
        y: 0,
        z: 0
      };
    }

    Shape.prototype.draw = function() {
      return this.blocks.forEach(function(b) {
        return b.draw();
      });
    };

    Shape.prototype.erase = function() {
      return this.blocks.forEach(function(b) {
        return b.erase();
      });
    };

    Shape.prototype.move = function(diffx, diffy, diffz) {
      return this.blocks.forEach(function(b) {
        b.x += diffx;
        b.y += diffy;
        b.z += diffz;
        return b.calculate_pos();
      });
    };

    Shape.prototype.set_position = function(posx, posy, posz) {
      this.position.x = posx;
      this.position.y = posy;
      this.position.z = posz;
      return this.blocks.forEach(function(b) {
        b.x += posx;
        b.y += posy;
        b.z += posz;
        return b.calculate_pos();
      });
    };

    Shape.prototype.rotate = function(dirx, diry, dirz) {
      var position;

      position = this.position;
      if (dirx !== 0) {
        this.blocks.forEach(function(b) {
          var temp;

          temp = b.y;
          b.y = (-(b.z - position.z)) * dirx + position.y;
          b.z = (temp - position.y) * dirx + position.z;
          return b.calculate_pos();
        });
      }
      if (diry !== 0) {
        this.blocks.forEach(function(b) {
          var temp;

          temp = b.x;
          b.x = (b.z - position.z) * diry + position.x;
          b.z = (-(temp - position.x)) * diry + position.z;
          return b.calculate_pos();
        });
      }
      if (dirz !== 0) {
        return this.blocks.forEach(function(b) {
          var temp;

          temp = b.x;
          b.x = (-(b.y - position.y)) * dirz + position.x;
          b.y = (temp - position.x) * dirz + position.y;
          return b.calculate_pos();
        });
      }
    };

    Shape.prototype.check_col = function() {
      var reboot;

      reboot = false;
      this.blocks.forEach(function(b) {
        if (b.z <= 0) {
          return reboot = true;
        }
      });
      if (reboot) {
        instantiate_shape();
        this.erase();
      }
      return this.move(0, 0, -1);
    };

    return Shape;

  })();

}).call(this);
