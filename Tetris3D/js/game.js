// Generated by CoffeeScript 1.6.2
(function() {
  var ASPECT, BLOCK_SIZE, DEPTH, FAR, HEIGHT, NEAR, TABLE_DEPTH, TABLE_HEIGHT, TABLE_WIDTH, VIEW_ANGLE, WIDTH, block2, block3, boundingBox, camera, canvas, createMovingBlock, createShape, createSolidBlock, gotToBottom, isInsideBox, moveShape, moveShapeBack, render, renderer, scene, shape, shapes, static_blocks;

  BLOCK_SIZE = 100;

  TABLE_WIDTH = 7;

  TABLE_HEIGHT = 7;

  TABLE_DEPTH = 15;

  WIDTH = BLOCK_SIZE * TABLE_WIDTH;

  HEIGHT = BLOCK_SIZE * TABLE_HEIGHT;

  DEPTH = BLOCK_SIZE * TABLE_DEPTH;

  VIEW_ANGLE = 45;

  ASPECT = WIDTH / HEIGHT;

  NEAR = 0.1;

  FAR = 10000;

  shape = null;

  static_blocks = [];

  shapes = [
    [
      {
        x: 0,
        y: -1,
        z: 0
      }, {
        x: 0,
        y: 0,
        z: 0
      }, {
        x: 0,
        y: 1,
        z: 0
      }, {
        x: 0,
        y: 2,
        z: 0
      }
    ], [
      {
        x: -1,
        y: 0,
        z: 0
      }, {
        x: 0,
        y: 0,
        z: 0
      }, {
        x: 1,
        y: 0,
        z: 0
      }, {
        x: 0,
        y: 1,
        z: 0
      }
    ], [
      {
        x: -1,
        y: 0,
        z: 0
      }, {
        x: 0,
        y: 0,
        z: 0
      }, {
        x: 1,
        y: 0,
        z: 0
      }, {
        x: -1,
        y: 1,
        z: 0
      }
    ], [
      {
        x: -1,
        y: 0,
        z: 0
      }, {
        x: 0,
        y: 0,
        z: 0
      }, {
        x: 0,
        y: 1,
        z: 0
      }, {
        x: 1,
        y: 1,
        z: 0
      }
    ], [
      {
        x: -1,
        y: 0,
        z: 0
      }, {
        x: 0,
        y: 0,
        z: 0
      }, {
        x: 0,
        y: -1,
        z: 0
      }, {
        x: 0,
        y: -1,
        z: 1
      }
    ], [
      {
        x: -1,
        y: 0,
        z: 0
      }, {
        x: 0,
        y: 0,
        z: 0
      }, {
        x: 0,
        y: 1,
        z: 0
      }, {
        x: 0,
        y: 1,
        z: 1
      }
    ], [
      {
        x: -1,
        y: 0,
        z: 0
      }, {
        x: 0,
        y: 0,
        z: 0
      }, {
        x: 0,
        y: -1,
        z: 0
      }, {
        x: 0,
        y: 0,
        z: 1
      }
    ]
  ];

  scene = new THREE.Scene();

  camera = new THREE.PerspectiveCamera(VIEW_ANGLE, ASPECT, NEAR, FAR);

  renderer = new THREE.WebGLRenderer();

  renderer.setSize(WIDTH, HEIGHT);

  canvas = $('#canvas');

  canvas.append(renderer.domElement);

  boundingBox = new THREE.Mesh(new THREE.CubeGeometry(WIDTH, HEIGHT, DEPTH * 2, TABLE_WIDTH, TABLE_HEIGHT, TABLE_DEPTH * 2), new THREE.MeshBasicMaterial({
    color: 0x999999,
    wireframe: true,
    wireframeLinewidth: 2
  }));

  scene.add(boundingBox);

  createMovingBlock = function(x, y, z) {
    var block;

    block = new THREE.SceneUtils.createMultiMaterialObject(new THREE.CubeGeometry(BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE), [
      new THREE.MeshBasicMaterial({
        color: 0xFFFFFF,
        wireframe: true,
        transparent: true
      }), new THREE.MeshBasicMaterial({
        color: 0xFFFFFF,
        transparent: true,
        opacity: 0.5
      })
    ]);
    scene.add(block);
    block.position.z = (z - 0.5) * BLOCK_SIZE;
    block.position.x = x * BLOCK_SIZE;
    block.position.y = y * BLOCK_SIZE;
    return block;
  };

  createSolidBlock = function(x, y, z) {
    var block2, static_colors;

    static_colors = [0x00FFFF, 0x0000FF, 0x3333FF, 0x6565FF, 0x9999FF, 0xB2B2FF, 0xCBCBFF, 0xE5E5FF, 0xE5FFE5, 0xCBFFCB, 0xB2FFB2, 0x99FF99, 0x65FF65, 0x33FF33, 0x00FF00];
    block2 = new THREE.SceneUtils.createMultiMaterialObject(new THREE.CubeGeometry(BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE), [
      new THREE.MeshBasicMaterial({
        color: 0x000000,
        wireframe: true,
        transparent: true
      }), new THREE.MeshBasicMaterial({
        color: static_colors[Math.floor(Math.abs(z) / BLOCK_SIZE)]
      })
    ]);
    scene.add(block2);
    block2.position.x = x;
    block2.position.y = y;
    block2.position.z = z;
    static_blocks.push(block2);
    return console.log(static_blocks);
  };

  createShape = function() {
    var cube, random_index, _i, _len, _ref;

    random_index = Math.floor(shapes.length * Math.random());
    scene.remove(shape);
    shape = new THREE.Object3D();
    _ref = shapes[random_index];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      cube = _ref[_i];
      shape.add(createMovingBlock(cube.x, cube.y, cube.z));
    }
    return scene.add(shape);
  };

  moveShape = function(value_x, value_y) {
    if (isInsideBox(value_x, value_y)) {
      shape.position.x = shape.position.x + value_x * BLOCK_SIZE;
      return shape.position.y = shape.position.y + value_y * BLOCK_SIZE;
    }
  };

  moveShapeBack = function() {
    if (!gotToBottom()) {
      return shape.position.z = shape.position.z - BLOCK_SIZE;
    }
  };

  isInsideBox = function(move_x, move_y) {
    var cube, pos_x, pos_y, _i, _len, _ref;

    _ref = shape.children;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      cube = _ref[_i];
      pos_x = cube.position.x + shape.position.x;
      pos_y = cube.position.y + shape.position.y;
      if (move_x < 0 && pos_x <= -3 * BLOCK_SIZE) {
        return false;
      } else if (move_x > 0 && pos_x >= 3 * BLOCK_SIZE) {
        return false;
      }
      if (move_y < 0 && pos_y <= -3 * BLOCK_SIZE) {
        return false;
      } else if (move_y > 0 && pos_y >= 3 * BLOCK_SIZE) {
        return false;
      }
    }
    return true;
  };

  gotToBottom = function() {
    var cube, neighbor, pos_z, _i, _len, _ref;

    _ref = shape.children;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      cube = _ref[_i];
      pos_z = cube.position.z + shape.position.z - BLOCK_SIZE;
      if (pos_z < -14.5 * BLOCK_SIZE) {
        return true;
      }
      neighbor = _.find(static_blocks, function(block) {
        return block.position.x === cube.position.x && block.position.y === cube.position.y && block.position.z === cube.position.z;
      });
      if (neighbor) {
        return true;
      }
    }
    return false;
  };

  block2 = createSolidBlock(BLOCK_SIZE * 3, BLOCK_SIZE * 3, -14.5 * BLOCK_SIZE);

  block3 = createSolidBlock(BLOCK_SIZE * 3, BLOCK_SIZE * 3, -0.5 * BLOCK_SIZE);

  createShape();

  console.log(shape);

  window.$(document).ready(function() {
    return window.$(document).keydown(function(e) {
      switch (e.keyCode) {
        case 37:
        case 65:
          return moveShape(-1, 0);
        case 38:
        case 87:
          return moveShape(0, 1);
        case 39:
        case 68:
          return moveShape(1, 0);
        case 40:
          return moveShape(0, -1);
        case 32:
          return moveShapeBack();
      }
    });
  });

  camera.position.z = DEPTH - 54 - BLOCK_SIZE * 6;

  render = function() {
    requestAnimationFrame(render);
    return renderer.render(scene, camera);
  };

  render();

}).call(this);
