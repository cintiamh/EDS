// Generated by CoffeeScript 1.4.0
(function() {
  var Alien, AliensGroup, BLOCK_SIZE, Bullet, Canon, HEIGHT, HEIGHT_BLOCKS, SpriteImage, WIDTH, WIDTH_BLOCKS, aliensArr, aliensGroup, animation, animations, background, bulletSpeed, bulletsArr, canon, canonSpeed, imageObj, layer, movCount, movDirection, movDownDist, movSideDist, stage, startTime,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BLOCK_SIZE = 3;

  WIDTH_BLOCKS = 184;

  HEIGHT_BLOCKS = 191;

  WIDTH = WIDTH_BLOCKS * BLOCK_SIZE;

  HEIGHT = HEIGHT_BLOCKS * BLOCK_SIZE;

  aliensArr = [];

  bulletsArr = [];

  canon = null;

  startTime = 0;

  movCount = 0;

  movDirection = 1;

  movSideDist = 2 * BLOCK_SIZE;

  movDownDist = 6 * BLOCK_SIZE;

  canonSpeed = 15;

  bulletSpeed = 20;

  stage = new Kinetic.Stage({
    container: "container",
    width: WIDTH,
    height: HEIGHT
  });

  layer = new Kinetic.Layer();

  background = new Kinetic.Rect({
    x: 0,
    y: 0,
    width: WIDTH,
    height: HEIGHT,
    fill: "#000000"
  });

  layer.add(background);

  animations = {
    alien01: [
      {
        x: BLOCK_SIZE,
        y: BLOCK_SIZE,
        width: 12 * BLOCK_SIZE,
        height: 8 * BLOCK_SIZE
      }, {
        x: 14 * BLOCK_SIZE,
        y: BLOCK_SIZE,
        width: 12 * BLOCK_SIZE,
        height: 8 * BLOCK_SIZE
      }
    ],
    alien02: [
      {
        x: BLOCK_SIZE,
        y: 10 * BLOCK_SIZE,
        width: 11 * BLOCK_SIZE,
        height: 8 * BLOCK_SIZE
      }, {
        x: 13 * BLOCK_SIZE,
        y: 10 * BLOCK_SIZE,
        width: 11 * BLOCK_SIZE,
        height: 8 * BLOCK_SIZE
      }
    ],
    alien03: [
      {
        x: BLOCK_SIZE,
        y: 19 * BLOCK_SIZE,
        width: 8 * BLOCK_SIZE,
        height: 8 * BLOCK_SIZE
      }, {
        x: 10 * BLOCK_SIZE,
        y: 19 * BLOCK_SIZE,
        width: 8 * BLOCK_SIZE,
        height: 8 * BLOCK_SIZE
      }
    ],
    spaceship: [
      {
        x: BLOCK_SIZE,
        y: (3 * 8 + 4) * BLOCK_SIZE,
        width: 16 * BLOCK_SIZE,
        height: 8 * BLOCK_SIZE
      }
    ],
    canon: [
      {
        x: BLOCK_SIZE,
        y: (4 * 8 + 5) * BLOCK_SIZE,
        width: 15 * BLOCK_SIZE,
        height: 8 * BLOCK_SIZE
      }
    ],
    hidden: [
      {
        x: 0,
        y: 0,
        width: 0,
        height: 0
      }
    ]
  };

  imageObj = new Image();

  aliensGroup = new Kinetic.Group();

  imageObj.onload = function() {
    var alien, num1, num2, _i, _j, _k, _len;
    canon = new Canon();
    layer.add(canon.kinetic_sprite);
    for (num1 = _i = 0; _i <= 4; num1 = ++_i) {
      for (num2 = _j = 0; _j <= 10; num2 = ++_j) {
        if (num1 === 0) {
          aliensArr.push(new Alien(BLOCK_SIZE + num2 * (12 + 2) * BLOCK_SIZE, num1 * (8 + 6) * BLOCK_SIZE, 'alien03'));
        }
        if (num1 === 1 || num1 === 2) {
          aliensArr.push(new Alien(num2 * (12 + 2) * BLOCK_SIZE, num1 * (8 + 6) * BLOCK_SIZE, 'alien02'));
        }
        if (num1 === 3 || num1 === 4) {
          aliensArr.push(new Alien(num2 * (12 + 2) * BLOCK_SIZE, num1 * (8 + 6) * BLOCK_SIZE, 'alien01'));
        }
      }
    }
    for (_k = 0, _len = aliensArr.length; _k < _len; _k++) {
      alien = aliensArr[_k];
      aliensGroup.add(alien.kinetic_sprite);
      layer.add(aliensGroup);
      alien.kinetic_sprite.attrs.frameRate = 2;
      alien.kinetic_sprite.start();
    }
    aliensGroup.move(BLOCK_SIZE, BLOCK_SIZE);
    document.onkeydown = function(event) {
      switch (event.keyCode) {
        case 37:
        case 65:
          return canon.startMove(-canonSpeed);
        case 39:
        case 68:
          return canon.startMove(canonSpeed);
        case 32:
          return canon.shoot();
      }
    };
    return document.onkeyup = function(event) {
      return canon.stopMove();
    };
  };

  stage.add(layer);

  animation = new Kinetic.Animation(function(frame) {
    var bul, _i, _len;
    if (canon) {
      canon.move();
    }
    if (bulletsArr.length > 0) {
      for (_i = 0, _len = bulletsArr.length; _i < _len; _i++) {
        bul = bulletsArr[_i];
        if (bul.alive) {
          bul.move();
          bul.checkAlienCol();
        }
      }
    }
    if (frame.time - startTime > 500) {
      startTime = frame.time;
      if (movCount % 16 === 15) {
        aliensGroup.move(0, movDownDist);
        movDirection *= -1;
      } else {
        aliensGroup.move(movDirection * movSideDist, 0);
      }
      return movCount++;
    }
  });

  animation.start();

  imageObj.src = "img/aliens_all.png";

  AliensGroup = (function() {

    function AliensGroup() {
      this.aliensGroup = new Kinetic.Group();
      this.aliensArr = [];
    }

    AliensGroup.prototype.initialize = function() {
      var alien, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = aliensArr.length; _i < _len; _i++) {
        alien = aliensArr[_i];
        this.aliensGroup.add(alien.kinetic_sprite);
        layer.add(aliensGroup);
        _results.push(alien.kinetic_sprite.start());
      }
      return _results;
    };

    return AliensGroup;

  })();

  SpriteImage = (function() {

    function SpriteImage(x, y, image, animation, animations, frameRate) {
      this.x = x;
      this.y = y;
      this.image = image;
      this.animation = animation;
      this.animations = animations;
      this.frameRate = frameRate;
      this.alive = true;
      this.width = 0;
      this.height = 0;
      this.kinetic_sprite = new Kinetic.Sprite({
        x: this.x,
        y: this.y,
        image: this.image,
        animation: this.animation,
        animations: this.animations,
        frameRate: this.frameRate
      });
      this.position = this.kinetic_sprite.getPosition();
    }

    SpriteImage.prototype.kill = function() {
      this.alive = false;
      return this.kinetic_sprite.setAnimation('hidden');
    };

    SpriteImage.prototype.updatePosition = function() {
      return this.position = this.kinetic_sprite.getPosition();
    };

    return SpriteImage;

  })();

  Alien = (function(_super) {

    __extends(Alien, _super);

    function Alien(x, y, animation) {
      this.x = x;
      this.y = y;
      this.animation = animation;
      Alien.__super__.constructor.call(this, this.x, this.y, imageObj, this.animation, animations, 2);
      this.alive = true;
      this.height = 8 * BLOCK_SIZE;
      switch (this.animation) {
        case 'alien01':
          this.width = 8 * BLOCK_SIZE;
          break;
        case 'alien02':
          this.width = 11 * BLOCK_SIZE;
          break;
        case 'alien03':
          this.width = 12 * BLOCK_SIZE;
      }
    }

    Alien.prototype.setFrameRate = function(framerate) {
      this.framerate = framerate;
      this.kinetic_sprite.attrs.frameRate = this.framerate;
      return this.kinetic_sprite.start();
    };

    return Alien;

  })(SpriteImage);

  Canon = (function(_super) {

    __extends(Canon, _super);

    function Canon() {
      this.speed = 0;
      Canon.__super__.constructor.call(this, WIDTH / 2 - 7 * BLOCK_SIZE, HEIGHT - 8 * BLOCK_SIZE, imageObj, 'canon', animations, 1);
      this.width = 15 * BLOCK_SIZE;
      this.height = 8 * BLOCK_SIZE;
      this.kinetic_sprite.setWidth(15 * BLOCK_SIZE);
      this.kinetic_sprite.setHeight(8 * BLOCK_SIZE);
    }

    Canon.prototype.startMove = function(vel) {
      return this.speed = vel;
    };

    Canon.prototype.stopMove = function() {
      return this.speed = 0;
    };

    Canon.prototype.shoot = function() {
      console.log("pew!");
      return bulletsArr.push(new Bullet(this.kinetic_sprite.getX(), this.kinetic_sprite.getY(), bulletSpeed * -1));
    };

    Canon.prototype.move = function() {
      var sprite, vel, x;
      vel = this.speed;
      sprite = this.kinetic_sprite;
      x = sprite.getX();
      if ((vel < 0 && x > 0) || (vel > 0 && x < WIDTH - 15 * BLOCK_SIZE)) {
        return sprite.move(vel, 0);
      }
    };

    return Canon;

  })(SpriteImage);

  Bullet = (function() {

    function Bullet(x, y, speed) {
      this.x = x;
      this.y = y;
      this.speed = speed;
      this.alive = true;
      this.bullet = new Kinetic.Rect({
        x: this.x + canon.kinetic_sprite.getWidth() / 2,
        y: this.y,
        width: BLOCK_SIZE,
        height: 4 * BLOCK_SIZE,
        fill: '#FFCCCC'
      });
      layer.add(this.bullet);
      this.position = this.bullet.getPosition();
    }

    Bullet.prototype.move = function() {
      var vel, y;
      vel = this.speed;
      y = this.bullet.getY();
      if (y < 0 || y > HEIGHT) {
        return this.kill();
      } else {
        return this.bullet.setY(y + this.speed);
      }
    };

    Bullet.prototype.kill = function() {
      this.alive = false;
      return this.bullet.setHeight(0);
    };

    Bullet.prototype.updatePosition = function() {
      return this.position = this.bullet.getPosition();
    };

    Bullet.prototype.checkAlienCol = function() {
      var alien, _i, _len, _results;
      if (this.alive) {
        this.updatePosition();
        _results = [];
        for (_i = 0, _len = aliensArr.length; _i < _len; _i++) {
          alien = aliensArr[_i];
          if (alien.alive) {
            alien.updatePosition();
            if (this.position.x > alien.position.x && this.position.x < alien.position.x + alien.width) {
              if (this.position.y > alien.position.y && this.position.y < alien.position.y + alien.height) {
                alien.kill();
                _results.push(this.kill());
              } else {
                _results.push(void 0);
              }
            } else {
              _results.push(void 0);
            }
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    };

    return Bullet;

  })();

}).call(this);
