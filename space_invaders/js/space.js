// Generated by CoffeeScript 1.4.0
(function() {
  var Alien, AlienBlock, BLOCK_SIZE, HEIGHT, HEIGHT_BLOCKS, SpriteImage, WIDTH, WIDTH_BLOCKS, aliensArr, aliensGroup, animation, animations, background, imageObj, layer, movCount, movDirection, movDownDist, movSideDist, stage, startTime,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BLOCK_SIZE = 3;

  WIDTH_BLOCKS = 190;

  HEIGHT_BLOCKS = 197;

  WIDTH = WIDTH_BLOCKS * BLOCK_SIZE;

  HEIGHT = HEIGHT_BLOCKS * BLOCK_SIZE;

  aliensArr = [];

  startTime = 0;

  movCount = 0;

  movDirection = 1;

  movSideDist = 2 * BLOCK_SIZE;

  movDownDist = 6 * BLOCK_SIZE;

  stage = new Kinetic.Stage({
    container: "container",
    width: WIDTH,
    height: HEIGHT
  });

  layer = new Kinetic.Layer();

  background = new Kinetic.Rect({
    x: 0,
    y: 0,
    width: WIDTH,
    height: HEIGHT,
    fill: "#000000"
  });

  layer.add(background);

  animations = {
    alien01: [
      {
        x: BLOCK_SIZE,
        y: BLOCK_SIZE,
        width: 12 * BLOCK_SIZE,
        height: 8 * BLOCK_SIZE
      }, {
        x: 14 * BLOCK_SIZE,
        y: BLOCK_SIZE,
        width: 12 * BLOCK_SIZE,
        height: 8 * BLOCK_SIZE
      }
    ],
    alien02: [
      {
        x: BLOCK_SIZE,
        y: 10 * BLOCK_SIZE,
        width: 11 * BLOCK_SIZE,
        height: 8 * BLOCK_SIZE
      }, {
        x: 13 * BLOCK_SIZE,
        y: 10 * BLOCK_SIZE,
        width: 11 * BLOCK_SIZE,
        height: 8 * BLOCK_SIZE
      }
    ],
    alien03: [
      {
        x: BLOCK_SIZE,
        y: 19 * BLOCK_SIZE,
        width: 8 * BLOCK_SIZE,
        height: 8 * BLOCK_SIZE
      }, {
        x: 10 * BLOCK_SIZE,
        y: 19 * BLOCK_SIZE,
        width: 8 * BLOCK_SIZE,
        height: 8 * BLOCK_SIZE
      }
    ],
    spaceship: [
      {
        x: BLOCK_SIZE,
        y: (3 * 8 + 4) * BLOCK_SIZE,
        width: 16 * BLOCK_SIZE,
        height: 8 * BLOCK_SIZE
      }
    ],
    canon: [
      {
        x: BLOCK_SIZE,
        y: (4 * 8 + 5) * BLOCK_SIZE,
        width: 15 * BLOCK_SIZE,
        height: 8 * BLOCK_SIZE
      }
    ],
    hidden: [
      {
        x: 0,
        y: 0,
        width: 0,
        height: 0
      }
    ]
  };

  imageObj = new Image();

  aliensGroup = new Kinetic.Group();

  imageObj.onload = function() {
    var alien, num1, num2, _i, _j, _k, _len;
    for (num1 = _i = 0; _i <= 4; num1 = ++_i) {
      for (num2 = _j = 0; _j <= 10; num2 = ++_j) {
        if (num1 === 0) {
          aliensArr.push(new Alien(BLOCK_SIZE + num2 * (12 + 2) * BLOCK_SIZE, num1 * (8 + 6) * BLOCK_SIZE, imageObj, 'alien03', animations, 1));
        }
        if (num1 === 1 || num1 === 2) {
          aliensArr.push(new Alien(num2 * (12 + 2) * BLOCK_SIZE, num1 * (8 + 6) * BLOCK_SIZE, imageObj, 'alien02', animations, 1));
        }
        if (num1 === 3 || num1 === 4) {
          aliensArr.push(new Alien(num2 * (12 + 2) * BLOCK_SIZE, num1 * (8 + 6) * BLOCK_SIZE, imageObj, 'alien01', animations, 1));
        }
      }
    }
    for (_k = 0, _len = aliensArr.length; _k < _len; _k++) {
      alien = aliensArr[_k];
      aliensGroup.add(alien.kinetic_sprite);
      layer.add(aliensGroup);
      alien.kinetic_sprite.attrs.frameRate = 2;
      alien.kinetic_sprite.start();
    }
    return aliensGroup.move(BLOCK_SIZE, BLOCK_SIZE);
  };

  stage.add(layer);

  animation = new Kinetic.Animation(function(frame) {
    if (frame.time - startTime > 500) {
      startTime = frame.time;
      if (movCount % 16 === 15) {
        aliensGroup.move(0, movDownDist);
        movDirection *= -1;
      } else {
        aliensGroup.move(movDirection * movSideDist, 0);
      }
      return movCount++;
    }
  });

  animation.start();

  imageObj.src = "img/aliens_all.png";

  AlienBlock = (function() {

    function AlienBlock() {
      this.aliensGroup = new Kinetic.Group();
    }

    AlienBlock.prototype.initialize = function() {
      var alien, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = aliensArr.length; _i < _len; _i++) {
        alien = aliensArr[_i];
        this.aliensGroup.add(alien.kinetic_sprite);
        layer.add(aliensGroup);
        _results.push(alien.kinetic_sprite.start());
      }
      return _results;
    };

    return AlienBlock;

  })();

  SpriteImage = (function() {

    function SpriteImage(x, y, image, animation, animations, framerate) {
      this.x = x;
      this.y = y;
      this.image = image;
      this.animation = animation;
      this.animations = animations;
      this.framerate = framerate;
      this.alive = true;
      this.kinetic_sprite = new Kinetic.Sprite({
        x: this.x,
        y: this.y,
        image: this.image,
        animation: this.animation,
        animations: this.animations,
        frameRate: this.framerate
      });
    }

    SpriteImage.prototype.kill = function() {
      this.alive = false;
      return this.kinetic_sprite.setAnimation('hidden');
    };

    SpriteImage.prototype.isAlive = function() {
      return this.alive;
    };

    return SpriteImage;

  })();

  Alien = (function(_super) {

    __extends(Alien, _super);

    function Alien() {
      return Alien.__super__.constructor.apply(this, arguments);
    }

    Alien.prototype.setFrameRate = function(framerate) {
      this.framerate = framerate;
      this.kinetic_sprite.attrs.frameRate = this.framerate;
      return this.kinetic_sprite.start();
    };

    return Alien;

  })(SpriteImage);

}).call(this);
