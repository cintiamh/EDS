// Generated by CoffeeScript 1.4.0
(function() {

  Game.Ship = (function() {

    function Ship(x, y, color) {
      this.x = x;
      this.y = y;
      if (color == null) {
        color = "#42B4E6";
      }
      this.max_speed = 4;
      this.drag = 0.01;
      this.ship = new Kinetic.Group;
      this.ship.add(new Kinetic.Polygon({
        points: [-15, -10, 15, 0, -15, 10],
        sides: 3,
        radius: 10,
        fill: color
      }));
      this.velocity = {
        x: 0,
        y: 0
      };
      this.acceleration = 0;
      this.setPosition(this.x, this.y);
      this.rotation = 0;
    }

    Ship.prototype.setPosition = function(x, y) {
      this.x = x;
      this.y = y;
      this.ship.setX(this.x);
      return this.ship.setY(this.y);
    };

    Ship.prototype.setAcceleration = function(val) {
      this.acceleration += val;
      return console.log("set acceleration " + this.acceleration);
    };

    Ship.prototype.setRotation = function(val) {
      this.rotation = val;
      return console.log("set rotation " + this.rotation);
    };

    Ship.prototype.getHypotenuse = function(x, y) {
      return Math.sqrt(x * x + y * y);
    };

    Ship.prototype.rotate = function(frame, dir) {
      var angleDiff, angularSpeed;
      angularSpeed = Math.PI / 2;
      angleDiff = frame.timeDiff * angularSpeed / 1000;
      return this.ship.rotate(dir * angleDiff);
    };

    Ship.prototype.moveShip = function() {
      var movementAngle, speed, speedAngle;
      if (this.acceleration !== 0) {
        movementAngle = this.ship.getRotation();
        this.velocity.x += Math.cos(movementAngle) * this.acceleration;
        this.velocity.y += Math.sin(movementAngle) * this.acceleration;
        this.acceleration = 0;
      }
      speed = this.getHypotenuse(this.velocity.x, this.velocity.y);
      if (speed > this.max_speed) {
        speed = this.max_speed;
      } else if (speed > 0) {
        speed -= this.drag;
      }
      speedAngle = Math.atan2(this.velocity.y, this.velocity.x);
      this.velocity.x = Math.cos(speedAngle) * speed;
      this.velocity.y = Math.sin(speedAngle) * speed;
      return this.ship.move(this.velocity.x, this.velocity.y);
    };

    return Ship;

  })();

}).call(this);
